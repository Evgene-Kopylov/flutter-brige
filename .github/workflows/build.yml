name: Build Manuspect App

on:
  push:
    branches:
      - build-3
  pull_request:
    branches:
      - build-3

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_ROOT: C:\vcpkg
      

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.22.2'

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install Rust toolchain
      run: rustup default 1.79.0

    - name: Install Flutter Rust Bridge Codegen
      run: cargo install flutter_rust_bridge_codegen

    - name: Install vcpkg
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat

    - name: Set environment variables
      run: |
        echo "VCPKG_ROOT=C:\vcpkg" >> $GITHUB_ENV
        echo "PATH=$VCPKG_ROOT;$PATH" >> $GITHUB_ENV

    - name: Install vcpkg dependencies
      run: |
        $env:VCPKG_ROOT = "C:\vcpkg"
        $env:PATH = "$env:VCPKG_ROOT;$env:PATH"
        vcpkg install libvpx:x64-windows-static
        vcpkg install aom:x64-windows-static
        vcpkg install libyuv:x64-windows-static

    - name: Install Flutter dependencies
      run: flutter pub get
      working-directory: my_app

    - name: Generate database.g.dart
      run: dart run build_runner build
      working-directory: my_app

    - name: Generate .frb files
      run: flutter_rust_bridge_codegen generate
      working-directory: my_app

    - name: Create .env file
      run: echo "API_URL=http://your_api_url/api/v1/" > .env
      working-directory: my_app

    - name: Build the Flutter app
      run: flutter build windows --release
      working-directory: my_app

    - name: Create unique tag
      id: create_tag
      run: |
        $date = Get-Date -Format "yyyyMMddHHmmss"
        $tagName = "build-${{ env.RELEASE_VERSION }}-$date"
        echo "RELEASE_TAG=$tagName" >> $env:GITHUB_ENV
        git tag -a $env:RELEASE_TAG -m "${{}}"
        git push origin $env:RELEASE_TAG


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: ${{ env.RELEASE_VERSION }}-${{ env.TAG_NAME }}
        draft: false
        prerelease: false


    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: build\windows\x64\runner\Release\my_app.exe
        asset_name: my_app.exe
        asset_content_type: application/octet-stream
